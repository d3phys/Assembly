ACTION(HLT,
{
        goto hlt;
})

ACTION(PSH | VAL_T,
{
        push_stack(stack, *(arg_t *)ip);       
        ip += sizeof(arg_t);
})

ACTION(PSH | REG_T, 
{
        push_stack(stack, reg[(uint64_t)*(arg_t *)ip]);       
        ip += sizeof(arg_t);
})

ACTION(PSH | MEM_T | REG_T, 
{
        push_stack(stack, ram[(uint64_t)reg[(uint64_t)*(arg_t *)ip]]);       
        ip += sizeof(arg_t);
})

ACTION(PSH | MEM_T | VAL_T, 
{
        push_stack(stack, ram[(uint64_t)*(arg_t *)ip]);       
        ip += sizeof(arg_t);
})

ACTION(POP, 
{
        pop_stack(stack);
})

ACTION(POP | REG_T, 
{
        reg[(uint64_t)*(arg_t *)ip] = pop_stack(stack);       
        ip += sizeof(arg_t);
})

ACTION(POP | MEM_T | VAL_T, 
{
        ram[(uint64_t)*(arg_t *)ip] = pop_stack(stack);       
        ip += sizeof(arg_t);
})

ACTION(POP | MEM_T | REG_T, 
{
        ram[(uint64_t)reg[(uint64_t)*(arg_t *)ip]] = pop_stack(stack);
        ip += sizeof(arg_t);
})

ACTION(SUB,
{
        reg[2] = pop_stack(stack);
        push_stack(stack, pop_stack(stack) - reg[2]);
})

ACTION(ADD,
{
        reg[2] = pop_stack(stack);
        push_stack(stack, pop_stack(stack) + reg[2]);
})

ACTION(MUL,
{
        reg[2] = pop_stack(stack);
        push_stack(stack, pop_stack(stack) * reg[2]);
})

ACTION(DIV,
{
        reg[2] = pop_stack(stack);
        push_stack(stack, pop_stack(stack) / reg[2]);
})

ACTION(SHW,
{
        printf("%lf\n", pop_stack(stack));
})

